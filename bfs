 #include <stdio.h>

 

int graph[100][100], q[100], prev[100], visited[100], front = 0, rear = 0;

 

int bfs(int vertex, int total, int endvertex){

    while (front <= rear){

        visited[vertex] = 1;

        for (int i = 1; i <= total; i++){ 

            if (graph[vertex][i] == 1 && visited[i] == 0){

                visited[i] = 1;

                prev[i] = vertex;

                q[rear] = i;

                rear++;

            }

        }

        vertex = q[front];

        front++;

        if (vertex == endvertex){

            return 1;

        }

    }

    return 0;

}

 

int main(){

    int n;

    scanf("%d", &n);

    for (int tc = 0; tc < n; tc++){

        int total, starting, ending;

        scanf("%d", &total);

        for (int i = 1; i <= total; i++){ // O(total Vertices)

            prev[i] = -1;

            visited[i] = 0;

        }

        for (int i = 1; i <= total; i++){ // O(total Vertices^2)

            for (int j = 1; j <= total; j++){

                scanf("%d", &graph[i][j]);

            }

        }

        scanf("%d %d", &starting, &ending);

        starting += 1;

        ending += 1;

        int flag = bfs(starting, total, ending); // O(total Vertices^2)

        int path[105] = {0};

        int ctr = 0;

        if (flag == 1){

            while (prev[ending] != -1){

                path[ctr] = ending;

                ending = prev[ending];

                ctr++;

            }

            printf("%d\n\n", ctr);

            printf("%d", starting - 1);

            for (int i = ctr - 1; i >= 0; i--){

                printf(" %d", path[i] - 1);

            }

            puts("");

        }

        else {

            printf("Not found\n");

        }

    }

 

 

    return 0;

}
